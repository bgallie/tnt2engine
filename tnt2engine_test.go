// This is free and unencumbered software released into the public domain.
// See the UNLICENSE file for details.

package tnt2engine

import (
	"io"
	"math/big"
	"reflect"
	"testing"
)

func TestTnt2Engine_Left(t *testing.T) {
	var tnt2Machine Tnt2Engine
	tnt2Machine.Init([]byte("SecretKey"), "")
	tnt2Machine.SetEngineType("E")
	tnt2Machine.BuildCipherMachine()
	tests := []struct {
		name string
		want chan CipherBlock
	}{
		{
			name: "ttel1",
			want: tnt2Machine.left,
		},
	}
	for _, tt := range tests {
		e := tnt2Machine
		t.Run(tt.name, func(t *testing.T) {
			if got := e.Left(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Tnt2Engine.Left() = %v, want %v", got, tt.want)
			}
		})
	}
	tnt2Machine.CloseCipherMachine()
}

func TestTnt2Engine_Right(t *testing.T) {
	var tnt2Machine Tnt2Engine
	tnt2Machine.Init([]byte("SecretKey"), "")
	tnt2Machine.SetEngineType("E")
	tnt2Machine.BuildCipherMachine()
	tests := []struct {
		name string
		want chan CipherBlock
	}{
		{
			name: "tter1",
			want: tnt2Machine.right,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := tnt2Machine
			if got := e.Right(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Tnt2Engine.Right() = %v, want %v", got, tt.want)
			}
		})
	}
	var blk CipherBlock
	tnt2Machine.left <- blk
	<-tnt2Machine.right
}

func TestTnt2Engine_CounterKey(t *testing.T) {
	var tnt2Machine Tnt2Engine
	tests := []struct {
		name             string
		key              string
		proFormaFileName string
		want             string
	}{
		{
			name:             "ttec1",
			key:              "SecretKey",
			proFormaFileName: "",
			want:             "ab2677fa2eecca36541ea85fd8d871203383b898bb025b8ec8fd5f24719eee1c",
		},
		{
			name:             "ttec2",
			key:              "SecretKey",
			proFormaFileName: "test.proforma.json",
			want:             "9d468a888bf287c0cdc3008569b76c0cb7091b062f0b6209461436534392f95c",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tnt2Machine.Init([]byte(tt.key), tt.proFormaFileName)
			if got := tnt2Machine.CounterKey(); got != tt.want {
				t.Errorf("Tnt2Engine.CounterKey() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestTnt2Engine_Index(t *testing.T) {
	var tnt2Machine Tnt2Engine
	tnt2Machine.Init([]byte("SecretKey"), "")
	iCnt, _ := new(big.Int).SetString("1234567890", 10)
	tnt2Machine.SetIndex(iCnt)
	tests := []struct {
		name     string
		wantCntr *big.Int
	}{
		{
			name:     "ttei1",
			wantCntr: iCnt,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := tnt2Machine
			if gotCntr := e.Index(); !reflect.DeepEqual(gotCntr, tt.wantCntr) {
				t.Errorf("Tnt2Engine.Index() = %v, want %v", gotCntr, tt.wantCntr)
			}
		})
	}
}

func TestTnt2Engine_SetIndex(t *testing.T) {
	var tnt2Machine Tnt2Engine
	tnt2Machine.Init([]byte("SecretKey"), "")
	iCnt, _ := new(big.Int).SetString("1234567890", 10)
	type args struct {
		iCnt *big.Int
	}
	tests := []struct {
		name string
		args args
		want *big.Int
	}{
		{
			name: "ttesi1",
			args: args{iCnt},
			want: iCnt,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := tnt2Machine
			e.SetIndex(tt.args.iCnt)
			if got := e.Index(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Tnt2Engine.Index() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestTnt2Engine_SetEngineType(t *testing.T) {
	var tnt2Machine Tnt2Engine
	tnt2Machine.Init([]byte("SecretKey"), "")
	type args struct {
		engineType string
	}
	tests := []struct {
		name string
		args args
	}{
		{
			name: "tteset1",
			args: args{"E"},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := tnt2Machine
			e.SetEngineType(tt.args.engineType)
			if got := e.engineType; got != tt.args.engineType {
				t.Errorf("Tnt2Engine.SetEngineType() = %v, want %v", got, tt.args.engineType)
			}
		})
	}
}

func TestTnt2Engine_Engine(t *testing.T) {
	var tnt2Machine Tnt2Engine
	tnt2Machine.Init([]byte("SecretKey"), "")
	tnt2Machine.SetIndex(BigZero)
	cnter := new(Counter)
	cnter.SetIndex(BigZero)
	tests := []struct {
		name string
		want []Crypter
	}{
		{
			name: "tnt2e1",
			want: []Crypter{
				new(Rotor).New(7669, 5615, 4467, []byte{
					170, 184, 49, 102, 72, 40, 191, 200, 54, 162, 73, 168, 157, 222, 191, 145,
					94, 228, 102, 107, 100, 224, 70, 11, 182, 190, 130, 141, 10, 67, 198, 196,
					124, 100, 153, 96, 133, 108, 70, 17, 19, 121, 26, 186, 38, 175, 52, 53,
					251, 45, 113, 3, 32, 9, 42, 37, 165, 185, 159, 27, 180, 200, 139, 86,
					217, 14, 161, 34, 254, 107, 37, 191, 246, 199, 82, 152, 158, 19, 76, 15,
					208, 75, 51, 143, 140, 82, 86, 247, 67, 128, 62, 96, 194, 97, 89, 184,
					220, 20, 66, 182, 168, 2, 23, 101, 200, 73, 180, 147, 2, 131, 76, 118,
					105, 200, 145, 166, 120, 133, 242, 46, 121, 39, 207, 132, 226, 163, 182, 166,
					244, 249, 174, 117, 154, 20, 112, 161, 99, 155, 87, 214, 96, 52, 106, 176,
					254, 46, 189, 203, 99, 171, 33, 27, 139, 149, 13, 233, 176, 113, 0, 70,
					57, 177, 237, 219, 180, 223, 77, 147, 180, 34, 169, 47, 224, 236, 48, 103,
					211, 10, 226, 191, 4, 193, 62, 13, 70, 224, 199, 40, 190, 53, 44, 235,
					118, 82, 253, 245, 154, 243, 18, 22, 19, 98, 142, 82, 58, 16, 200, 208,
					242, 18, 77, 57, 102, 42, 185, 52, 67, 180, 79, 222, 218, 174, 233, 105,
					212, 120, 40, 196, 47, 177, 2, 152, 10, 172, 229, 200, 155, 76, 78, 182,
					184, 199, 71, 26, 96, 252, 20, 5, 163, 204, 244, 42, 196, 165, 196, 37,
					14, 42, 140, 206, 220, 157, 109, 130, 122, 81, 138, 197, 36, 225, 88, 48,
					138, 84, 228, 82, 220, 166, 82, 157, 16, 172, 178, 7, 10, 65, 6, 246,
					191, 31, 216, 252, 99, 193, 204, 127, 251, 135, 85, 8, 39, 65, 103, 15,
					112, 13, 224, 220, 86, 48, 164, 39, 67, 105, 209, 135, 107, 140, 150, 82,
					220, 189, 83, 31, 138, 70, 56, 45, 209, 169, 137, 37, 57, 129, 158, 94,
					80, 14, 129, 46, 34, 45, 208, 225, 53, 242, 199, 215, 138, 203, 130, 79,
					163, 68, 73, 155, 42, 129, 2, 12, 234, 222, 132, 203, 213, 69, 128, 111,
					251, 26, 144, 46, 121, 87, 185, 233, 105, 35, 215, 133, 134, 27, 94, 4,
					207, 111, 137, 222, 213, 133, 156, 122, 62, 104, 16, 132, 135, 191, 197, 179,
					105, 200, 247, 73, 237, 188, 222, 7, 239, 208, 51, 114, 149, 155, 53, 182,
					155, 43, 36, 171, 107, 193, 21, 192, 185, 134, 19, 155, 218, 186, 30, 186,
					207, 97, 187, 109, 229, 200, 128, 225, 114, 18, 175, 150, 122, 50, 165, 134,
					50, 84, 173, 34, 169, 56, 217, 241, 236, 200, 131, 128, 108, 180, 78, 196,
					112, 179, 186, 81, 231, 46, 8, 232, 194, 135, 84, 219, 215, 189, 197, 58,
					218, 22, 235, 125, 145, 146, 242, 237, 196, 46, 3, 154, 233, 129, 50, 224,
					184, 192, 164, 85, 182, 76, 129, 166, 88, 70, 6, 90, 234, 116, 201, 197,
					172, 241, 251, 143, 15, 89, 207, 225, 239, 103, 200, 188, 154, 255, 9, 108,
					245, 101, 171, 167, 187, 70, 55, 100, 12, 98, 194, 211, 154, 33, 209, 147,
					165, 40, 80, 117, 200, 168, 133, 252, 124, 177, 130, 47, 22, 145, 39, 134,
					91, 194, 23, 25, 118, 25, 194, 130, 237, 226, 68, 1, 69, 76, 10, 115,
					255, 167, 26, 236, 197, 72, 149, 150, 5, 75, 226, 24, 252, 218, 145, 151,
					153, 93, 74, 178, 183, 143, 203, 58, 189, 75, 122, 72, 144, 25, 222, 154,
					226, 105, 98, 146, 97, 247, 116, 153, 43, 165, 127, 245, 110, 235, 97, 38,
					5, 158, 17, 213, 94, 137, 128, 111, 93, 139, 39, 45, 212, 227, 127, 36,
					110, 248, 115, 130, 5, 147, 150, 128, 145, 173, 50, 222, 16, 248, 45, 203,
					24, 104, 167, 185, 222, 231, 13, 223, 46, 39, 189, 76, 175, 148, 124, 68,
					148, 62, 236, 140, 227, 169, 68, 197, 147, 25, 30, 115, 44, 69, 234, 62,
					205, 201, 5, 17, 39, 155, 193, 173, 123, 248, 160, 151, 21, 30, 99, 127,
					247, 63, 91, 34, 70, 87, 173, 231, 194, 146, 84, 116, 20, 76, 24, 31,
					170, 252, 158, 195, 30, 97, 9, 201, 26, 79, 101, 65, 190, 221, 15, 119,
					43, 187, 108, 195, 102, 80, 56, 67, 168, 144, 199, 165, 231, 247, 206, 1,
					36, 144, 220, 192, 148, 206, 42, 190, 32, 159, 123, 1, 163, 188, 147, 166,
					64, 107, 196, 146, 203, 188, 195, 235, 83, 9, 156, 176, 198, 183, 25, 213,
					113, 87, 73, 246, 38, 57, 15, 119, 205, 128, 108, 180, 112, 149, 123, 242,
					28, 230, 128, 200, 42, 102, 13, 96, 37, 29, 53, 14, 20, 248, 242, 208,
					167, 30, 75, 106, 110, 143, 243, 184, 237, 185, 48, 45, 3, 222, 255, 118,
					178, 217, 233, 13, 241, 220, 233, 105, 4, 85, 230, 36, 57, 247, 146, 16,
					244, 195, 153, 130, 13, 105, 7, 73, 232, 27, 245, 251, 47, 246, 58, 86,
					23, 146, 196, 135, 22, 221, 7, 58, 82, 194, 9, 141, 70, 109, 104, 155,
					42, 82, 156, 233, 188, 240, 149, 217, 20, 35, 13, 138, 243, 226, 230, 134,
					32, 38, 172, 132, 114, 148, 193, 175, 89, 154, 198, 187, 103, 59, 236, 211,
					43, 236, 51, 218, 118, 11, 202, 207, 108, 83, 164, 66, 45, 204, 242, 238,
					90, 116, 110, 153, 234, 191, 224, 10, 25, 97, 202, 40, 180, 68, 24, 107,
					41, 166, 140, 73, 77, 29, 96, 90, 200, 204, 135, 98, 175, 77, 64, 21,
					55, 198, 12, 9, 229, 23, 217, 70, 52, 9, 181, 211, 251, 55, 210, 139,
					220, 108, 141, 12, 220, 104, 193, 214, 87, 176, 81, 97, 200, 152, 88}),
				new(Rotor).New(1753, 1494, 1039, []byte{
					100, 120, 105, 253, 78, 6, 70, 91, 136, 33, 73, 16, 15, 13, 174, 206,
					97, 207, 186, 14, 141, 185, 228, 85, 161, 253, 190, 198, 234, 193, 63, 20,
					63, 229, 90, 58, 254, 193, 63, 69, 156, 75, 113, 145, 167, 124, 26, 38,
					94, 117, 42, 25, 81, 251, 172, 67, 175, 138, 159, 85, 66, 180, 187, 101,
					204, 45, 222, 90, 143, 217, 32, 9, 109, 71, 24, 223, 43, 196, 181, 175,
					67, 118, 69, 154, 201, 178, 228, 137, 216, 184, 102, 29, 148, 77, 27, 139,
					90, 20, 115, 102, 91, 37, 244, 44, 9, 254, 144, 216, 214, 201, 70, 160,
					127, 154, 161, 160, 125, 210, 16, 141, 151, 211, 117, 153, 153, 75, 141, 252,
					109, 76, 251, 215, 116, 31, 224, 156, 56, 112, 40, 36, 180, 156, 214, 190,
					122, 206, 11, 172, 52, 68, 167, 87, 53, 234, 125, 167, 21, 100, 193, 166,
					26, 9, 237, 249, 101, 142, 141, 49, 210, 254, 139, 72, 88, 148, 223, 216,
					251, 70, 63, 0, 182, 75, 137, 218, 178, 155, 101, 102, 195, 226, 193, 26,
					9, 12, 147, 186, 248, 43, 5, 117, 133, 78, 14, 201, 165, 155, 206, 57,
					120, 35, 117, 215, 16, 129, 104, 133, 173, 50, 38, 200, 240, 210, 250, 157,
					12, 140, 182, 16, 67, 146, 32, 30, 26, 92, 157, 195, 158, 117, 29, 26,
					115, 201, 171, 66, 251, 125, 141, 213, 131, 127, 40, 102}),
				new(Permutator).New([]int{43, 57, 73, 83}, []byte{
					207, 252, 142, 205, 239, 35, 230, 62, 69, 94, 166, 89, 184, 81, 144, 120,
					27, 167, 39, 224, 75, 243, 87, 99, 47, 105, 163, 123, 129, 225, 2, 242,
					65, 43, 12, 113, 30, 102, 240, 78, 137, 109, 112, 210, 214, 118, 106, 22,
					232, 181, 164, 255, 70, 198, 160, 44, 231, 20, 228, 53, 85, 238, 178, 133,
					95, 194, 245, 234, 13, 147, 134, 25, 244, 91, 176, 38, 46, 1, 217, 249,
					250, 52, 182, 73, 206, 140, 216, 145, 60, 218, 213, 8, 151, 101, 156, 5,
					241, 67, 49, 42, 212, 180, 92, 21, 16, 130, 128, 126, 98, 199, 162, 188,
					117, 191, 66, 84, 57, 208, 158, 247, 41, 131, 227, 155, 61, 165, 253, 51,
					119, 103, 179, 93, 122, 83, 183, 116, 79, 222, 50, 59, 80, 110, 186, 141,
					90, 152, 127, 107, 54, 71, 185, 161, 169, 34, 148, 146, 157, 138, 24, 237,
					76, 196, 192, 251, 189, 201, 219, 86, 68, 37, 33, 82, 11, 170, 246, 72,
					229, 28, 32, 132, 23, 197, 108, 236, 220, 17, 150, 190, 171, 96, 26, 204,
					209, 31, 211, 4, 14, 136, 195, 45, 172, 111, 154, 36, 149, 226, 202, 187,
					193, 223, 139, 175, 124, 9, 3, 58, 125, 88, 15, 6, 121, 235, 221, 200,
					114, 254, 135, 168, 7, 29, 159, 48, 40, 115, 143, 203, 215, 77, 18, 55,
					56, 177, 100, 0, 173, 104, 248, 97, 74, 63, 233, 19, 64, 174, 153, 10}),
				new(Rotor).New(1721, 1250, 660, []byte{
					25, 134, 2, 219, 108, 110, 170, 11, 12, 129, 29, 172, 198, 2, 14, 255,
					158, 7, 103, 114, 63, 69, 173, 156, 249, 147, 235, 203, 90, 200, 233, 73,
					38, 137, 10, 93, 176, 253, 64, 85, 46, 136, 21, 220, 37, 109, 149, 169,
					165, 153, 37, 42, 63, 35, 65, 196, 237, 215, 100, 226, 151, 53, 172, 215,
					240, 111, 136, 4, 47, 134, 80, 10, 165, 192, 212, 158, 48, 116, 89, 211,
					76, 120, 62, 226, 174, 97, 105, 33, 118, 245, 247, 162, 179, 90, 207, 178,
					69, 114, 201, 206, 93, 130, 79, 199, 223, 120, 233, 66, 86, 178, 59, 104,
					16, 217, 189, 78, 8, 249, 139, 156, 141, 222, 143, 8, 155, 96, 216, 156,
					210, 214, 108, 1, 80, 147, 10, 50, 53, 32, 78, 176, 6, 183, 11, 251,
					130, 192, 204, 184, 131, 159, 142, 127, 170, 183, 238, 60, 6, 47, 77, 30,
					125, 91, 170, 213, 209, 57, 250, 143, 252, 174, 54, 177, 55, 216, 220, 17,
					194, 54, 199, 66, 201, 194, 117, 226, 223, 146, 194, 177, 11, 93, 66, 182,
					46, 122, 253, 161, 204, 40, 167, 40, 92, 37, 134, 155, 0, 231, 21, 105,
					73, 171, 159, 246, 182, 91, 87, 50, 12, 5, 182, 217, 220, 84, 23, 24,
					2, 59, 88, 141, 5, 28, 254, 61, 15, 206, 228, 126, 138, 90, 57, 243,
					39, 215, 151, 181, 144, 211, 147, 198}),
				new(Rotor).New(1741, 1009, 1513, []byte{
					59, 155, 29, 153, 190, 106, 54, 89, 63, 156, 123, 112, 152, 24, 237, 200,
					85, 31, 249, 221, 7, 186, 76, 48, 229, 63, 232, 43, 60, 224, 108, 113,
					71, 154, 254, 136, 83, 102, 6, 108, 108, 138, 65, 104, 190, 98, 197, 120,
					244, 159, 191, 154, 224, 194, 37, 255, 51, 135, 123, 162, 17, 170, 199, 216,
					247, 94, 186, 218, 204, 48, 242, 65, 203, 30, 22, 226, 242, 57, 40, 32,
					22, 231, 138, 222, 125, 10, 125, 108, 24, 59, 221, 99, 156, 96, 214, 129,
					20, 227, 252, 198, 205, 71, 208, 99, 94, 247, 115, 76, 198, 106, 70, 134,
					143, 223, 158, 226, 204, 99, 210, 71, 139, 87, 33, 236, 30, 244, 49, 223,
					228, 215, 142, 236, 68, 74, 166, 97, 216, 67, 14, 41, 128, 40, 55, 70,
					235, 130, 50, 118, 198, 96, 87, 26, 134, 122, 174, 119, 237, 6, 239, 91,
					84, 144, 211, 239, 252, 172, 143, 151, 5, 249, 200, 38, 149, 31, 224, 68,
					100, 250, 25, 173, 38, 74, 133, 18, 244, 7, 138, 0, 85, 143, 137, 140,
					38, 95, 191, 129, 109, 227, 224, 28, 66, 39, 80, 45, 49, 78, 63, 245,
					4, 42, 118, 84, 72, 204, 145, 70, 139, 113, 103, 179, 35, 211, 87, 205,
					38, 235, 135, 115, 15, 14, 19, 163, 29, 185, 234, 35, 191, 251, 64, 151,
					9, 166, 252, 7, 125, 133, 7, 156, 45, 14}),
				new(Permutator).New([]int{49, 51, 73, 83}, []byte{
					248, 250, 32, 91, 122, 166, 115, 61, 178, 111, 37, 35, 82, 167, 157, 66,
					22, 65, 47, 1, 195, 182, 190, 73, 19, 218, 237, 76, 140, 155, 18, 11,
					30, 207, 105, 49, 230, 83, 10, 251, 52, 136, 99, 212, 108, 154, 113, 41,
					185, 44, 102, 226, 135, 165, 94, 27, 6, 177, 162, 161, 209, 200, 33, 23,
					197, 120, 71, 249, 125, 244, 217, 38, 0, 128, 95, 80, 214, 254, 163, 203,
					180, 137, 100, 235, 16, 58, 78, 173, 3, 118, 148, 191, 15, 7, 149, 219,
					39, 129, 75, 158, 224, 92, 147, 144, 236, 60, 29, 9, 252, 51, 139, 97,
					43, 87, 193, 222, 85, 223, 127, 153, 192, 13, 143, 70, 151, 123, 211, 72,
					93, 194, 229, 42, 17, 146, 196, 107, 215, 112, 231, 21, 124, 86, 132, 238,
					26, 189, 98, 172, 201, 175, 188, 88, 114, 5, 25, 64, 103, 246, 45, 57,
					109, 63, 81, 62, 204, 106, 179, 199, 116, 141, 186, 121, 84, 210, 79, 156,
					216, 14, 253, 233, 46, 55, 138, 34, 74, 20, 245, 89, 198, 133, 239, 142,
					234, 24, 176, 213, 169, 241, 90, 232, 28, 240, 183, 227, 56, 247, 160, 152,
					202, 4, 159, 104, 187, 31, 174, 48, 168, 67, 40, 50, 134, 228, 181, 170,
					225, 126, 54, 36, 220, 208, 150, 117, 255, 221, 101, 69, 77, 110, 243, 206,
					130, 59, 205, 242, 184, 164, 131, 12, 2, 119, 96, 171, 53, 68, 8, 145}),
				new(Rotor).New(1723, 1293, 1046, []byte{
					59, 137, 3, 62, 80, 176, 170, 169, 12, 135, 154, 73, 218, 169, 34, 130,
					71, 240, 156, 66, 122, 214, 138, 174, 35, 15, 210, 20, 0, 17, 47, 172,
					227, 243, 160, 166, 101, 87, 0, 83, 16, 204, 69, 56, 249, 1, 107, 129,
					30, 236, 248, 46, 59, 16, 136, 240, 7, 68, 175, 181, 102, 24, 221, 34,
					206, 73, 37, 100, 74, 5, 82, 49, 42, 77, 33, 219, 30, 140, 122, 201,
					173, 86, 171, 7, 139, 239, 119, 224, 83, 33, 167, 38, 38, 252, 238, 109,
					173, 151, 153, 182, 170, 199, 109, 174, 85, 177, 165, 37, 171, 94, 247, 29,
					178, 32, 54, 252, 180, 240, 170, 188, 119, 168, 101, 220, 147, 32, 153, 5,
					15, 239, 180, 141, 232, 143, 14, 49, 98, 69, 224, 22, 134, 220, 139, 165,
					26, 189, 188, 120, 113, 196, 95, 124, 238, 91, 217, 213, 114, 32, 177, 200,
					216, 95, 142, 54, 252, 162, 46, 35, 191, 106, 48, 42, 71, 37, 16, 157,
					79, 66, 33, 12, 120, 31, 247, 54, 48, 189, 177, 142, 183, 152, 122, 252,
					139, 150, 164, 251, 77, 9, 128, 220, 145, 27, 85, 162, 42, 154, 151, 87,
					176, 158, 233, 135, 198, 224, 14, 216, 73, 28, 240, 129, 130, 85, 77, 101,
					56, 212, 76, 210, 78, 21, 17, 60, 130, 231, 20, 210, 179, 86, 116, 29,
					121, 144, 166, 0, 136, 120, 97, 5}),
				new(Rotor).New(1733, 1313, 1414, []byte{
					141, 233, 47, 225, 230, 220, 229, 226, 34, 136, 160, 200, 162, 159, 148, 163,
					157, 133, 38, 86, 25, 23, 18, 48, 5, 98, 112, 20, 37, 159, 82, 163,
					209, 135, 40, 197, 152, 8, 255, 234, 149, 22, 158, 19, 235, 186, 173, 247,
					109, 77, 243, 223, 143, 165, 33, 110, 122, 181, 130, 242, 116, 132, 205, 43,
					4, 81, 85, 99, 152, 109, 9, 180, 190, 100, 204, 226, 97, 214, 214, 200,
					169, 61, 53, 107, 128, 231, 15, 42, 162, 156, 119, 166, 223, 143, 234, 16,
					220, 234, 132, 0, 200, 20, 164, 12, 216, 165, 86, 49, 149, 83, 200, 208,
					151, 80, 65, 60, 102, 69, 55, 248, 199, 233, 6, 239, 204, 212, 244, 89,
					255, 240, 54, 232, 189, 143, 233, 51, 44, 167, 97, 2, 71, 233, 154, 155,
					213, 203, 55, 110, 48, 187, 130, 84, 87, 71, 158, 91, 42, 21, 229, 161,
					2, 176, 152, 186, 16, 99, 185, 200, 245, 89, 186, 173, 54, 78, 101, 242,
					169, 224, 83, 242, 78, 39, 93, 123, 86, 196, 13, 82, 104, 92, 139, 230,
					35, 84, 182, 162, 19, 119, 20, 62, 214, 197, 134, 75, 57, 52, 91, 37,
					225, 167, 86, 81, 159, 46, 98, 38, 166, 49, 253, 37, 220, 156, 187, 92,
					92, 4, 17, 20, 89, 244, 147, 114, 180, 179, 208, 196, 42, 227, 66, 2,
					166, 64, 12, 142, 162, 228, 83, 106, 244}),
				cnter},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tnt2Machine.engine; !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Tnt2Engine.Engine() = %v, want %v", got, tt.want[:8])
			}
		})
	}
}

func TestTnt2Engine_EngineType(t *testing.T) {
	var tnt2Machine Tnt2Engine
	tnt2Machine.Init([]byte("SecretKey"), "")
	tests := []struct {
		name string
		want string
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := tnt2Machine
			if got := e.EngineType(); got != tt.want {
				t.Errorf("Tnt2Engine.EngineType() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestTnt2Engine_MaximalStates(t *testing.T) {
	var tnt2Machine Tnt2Engine
	tnt2Machine.Init([]byte("SecretKey"), "")
	want, _ := new(big.Int).SetString("49101257188406090296051850365430624307", 10)
	tests := []struct {
		name string
		want *big.Int
	}{
		{
			name: "tteset1",
			want: want,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := tnt2Machine
			if got := e.MaximalStates(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Tnt2Engine.MaximalStates() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestTnt2Engine_Init(t *testing.T) {
	var tnt2Machine Tnt2Engine
	tnt2Machine.Init([]byte("SecretKey"), "")
	type args struct {
		secret           []byte
		proFormaFileName string
	}
	tests := []struct {
		name string
		args args
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := tnt2Machine
			e.Init(tt.args.secret, tt.args.proFormaFileName)
		})
	}
}

func TestTnt2Engine_BuildCipherMachine(t *testing.T) {
	var tnt2Machine Tnt2Engine
	tnt2Machine.Init([]byte("SecretKey"), "")
	tests := []struct {
		name string
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := tnt2Machine
			e.BuildCipherMachine()
		})
	}
}

func Test_createProFormaMachine(t *testing.T) {
	type args struct {
		pfmReader io.Reader
	}
	tests := []struct {
		name string
		args args
		want *[]Crypter
	}{
		{
			name: "tcpfm1",
			args: args{pfmReader: nil},
			want: &[]Crypter{Rotor1, Rotor2, Permutator1, Rotor3, Rotor4, Permutator2, Rotor5, Rotor6},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := createProFormaMachine(tt.args.pfmReader); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("createProFormaMachine() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_updateRotor(t *testing.T) {
	type args struct {
		r      *Rotor
		random *Rand
	}
	tests := []struct {
		name string
		args args
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.args.r.Update(tt.args.random)
		})
	}
}

func Test_updatePermutator(t *testing.T) {
	type args struct {
		p      *Permutator
		random *Rand
	}
	tests := []struct {
		name string
		args args
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.args.p.Update(tt.args.random)
		})
	}
}
